#!/usr/bin/env bash
set -eou pipefail

dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
app=$(basename $(dirname $dir))
src_dir=''
case $(whoami) in
  (skilbjo)         src_dir='/Users/skilbjo/dev/markets-etl' ;;
  ('john.skilbeck') src_dir='/Users/john.skilbeck/dev/markets-etl' ;;
esac

cd "${dir}/../../"                   # now in ~/dev/lambdas/

cleanup(){
  if [[ -f ${app}/project.clj ]]; then rm -f ${app}/project.clj; fi
  if [[ -d ${app}/src         ]]; then rm -r ${app}/src; fi
}

copy_files(){
  cleanup

  cp "${src_dir}/project.clj"  "${app}/project.clj"
  cp -r "${src_dir}/src"       "${app}/src"
}

add_aws_lambda_clj(){
  cp "${app}/include/aws_lambda.clj" "${app}/src/jobs/aws_lambda.clj"
}

util_clj(){
  sed -i '' -e '1,5d;' "${app}/src/markets_etl/util.clj"

  local header='(ns markets-etl.util
  (:require [clj-time.core :as time]
            [clj-time.coerce :as coerce]
            [clojure.pprint :as pprint]
            [clojure.string :as string])
  (:import [com.amazonaws.services.kms AWSKMS AWSKMSClientBuilder]
           [com.amazonaws.services.kms.model DecryptRequest]
           [java.util Base64]
           (java.nio ByteBuffer)
           (java.nio.charset Charset)))'

  echo "$header" | cat - "${app}/src/markets_etl/util.clj" >temp && \
    mv temp "${app}/src/markets_etl/util.clj"

  local decrypt='
(defn decrypt [ciphertext]
  (let [decoder (Base64/getDecoder)
        decoded-text (.decode decoder ciphertext)
        kms-client (AWSKMSClientBuilder/defaultClient)
        decode-request (doto (DecryptRequest.)
                         (.withCiphertextBlob (ByteBuffer/wrap decoded-text)))
        decode-response (.decrypt kms-client decode-request)]
    (.toString (.decode (Charset/forName "UTF-8") (.getPlaintext decode-response)))))'

  echo "$decrypt" >>"${app}/src/markets_etl/util.clj"
}

sql_clj(){
  sed -i '' -e '1,6d;' "${app}/src/markets_etl/sql.clj"

  echo "$header" | cat - "${app}/src/markets_etl/sql.clj" >temp && \
    mv temp "${app}/src/markets_etl/sql.clj"

  local header='
(ns markets-etl.sql
  (:require [clojure.string :as string]
            [clojure.data.csv :as csv]
            [clojure.java.jdbc :as jdbc]
            [clojure.java.io :as io]
            [environ.core :refer [env]]
            [markets-etl.util :as util]
            [semantic-csv.core :as sc])
  (:import [java.sql DriverManager]))'

  athena='
(defn insert-to-athena [job coll]
  (let [convert-to-csv (fn [row]
                         (io/delete-file (str "/tmp/"
                                              job
                                              ".csv"))
                         (with-open [writer (io/writer (str "/tmp/"
                                                            job
                                                            ".csv"))]
                           (csv/write-csv writer row)))
        s3-put         (fn []
                         (s3/put-object :bucket-name "skilbjo-data"
                                        :key         (str "datalake/"
                                                          job
                                                          "/s3uploaddate="
                                                          util/now
                                                          "/file.csv")
                                        :metadata    {:server-side-encryption "AES256"}
                                        :file        (str "/tmp/"
                                                          job
                                                           "csv")))]
    (->> coll
         sc/vectorize
         convert-to-csv
         s3-put)))'

  echo "$athena" >>"${app}/src/markets_etl/sql.clj"
}

project_clj(){
  sed -i '' -e '1,3d;' "${app}/project.clj"

  local header='(defproject markets-etl "0.1.0"
  :uberjar-name "app.jar"
  :dependencies [[org.clojure/clojure "1.8.0"]
                 [com.amazonaws/aws-lambda-java-core "1.0.0"]
                 [com.amazonaws/aws-java-sdk-kms "1.11.98"]
                 [amazonica "0.3.117" :exclusions [com.amazonaws/aws-java-sdk]]
                 [org.clojure/data.csv "0.1.4"]
                 [semantic-csv "0.2.1-alpha1"]'

  echo "$header" | cat - "${app}/project.clj" >temp && \
    mv temp "${app}/project.clj"
}

src_files_clj(){
  new_main='
(defn -main [& args]
  (let [get-data (fn [{:keys [dataset
                              ticker]}]
                   (->> ticker
                        (map (fn [tkr]
                               (-> (api/query-quandl! dataset
                                                      tkr
                                                      query-params)
                                   (assoc :dataset dataset :ticker tkr))))))
        data        (->> datasets
                         (map get-data)
                         flatten)]

    (execute! data)))'

  echo 'Figure out a way to replace with the new main here... '

  # works for all jobs
  new_execute='
(defn execute! [data]
  (->> data
       (map prepare-row)
       flatten
       sql/insert-to-athena
       doall)))'
  echo 'Figure out a way to replace with the new execute! here... '

  sed -i '' 's/ env/ env util\/decrypt/g' "${app}/src/jobs/equities.clj"
  sed -i '' 's/ env/ env util\/decrypt/g' "${app}/src/jobs/currency.clj"
  sed -i '' 's/ env/ env util\/decrypt/g' "${app}/src/jobs/economics.clj"
  sed -i '' 's/ env/ env util\/decrypt/g' "${app}/src/jobs/interest_rates.clj"
  sed -i '' 's/ env/ env util\/decrypt/g' "${app}/src/jobs/real_estate.clj"

  sed -i '' 's/ env/ env util\/decrypt/g' "${app}/src/markets_etl/api.clj"
  sed -i '' 's/ env/ env util\/decrypt/g' "${app}/src/markets_etl/sql.clj"
}

add_lambda_wrappers(){
  sql_clj
  util_clj
  project_clj
  src_files_clj
}

copy_files
add_aws_lambda_clj
add_lambda_wrappers
